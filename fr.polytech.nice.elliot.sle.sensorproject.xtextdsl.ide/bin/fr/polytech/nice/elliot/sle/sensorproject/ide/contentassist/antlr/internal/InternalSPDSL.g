/*
 * generated by Xtext 2.14.0
 */
grammar InternalSPDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.polytech.nice.elliot.sle.sensorproject.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.polytech.nice.elliot.sle.sensorproject.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.polytech.nice.elliot.sle.sensorproject.services.SPDSLGrammarAccess;

}
@parser::members {
	private SPDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(SPDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSystem
entryRuleSystem
:
{ before(grammarAccess.getSystemRule()); }
	 ruleSystem
{ after(grammarAccess.getSystemRule()); } 
	 EOF 
;

// Rule System
ruleSystem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSystemAccess().getGroup()); }
		(rule__System__Group__0)
		{ after(grammarAccess.getSystemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode
entryRuleNode
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAccess().getAlternatives()); }
		(rule__Node__Alternatives)
		{ after(grammarAccess.getNodeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode_Impl
entryRuleNode_Impl
:
{ before(grammarAccess.getNode_ImplRule()); }
	 ruleNode_Impl
{ after(grammarAccess.getNode_ImplRule()); } 
	 EOF 
;

// Rule Node_Impl
ruleNode_Impl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNode_ImplAccess().getGroup()); }
		(rule__Node_Impl__Group__0)
		{ after(grammarAccess.getNode_ImplAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensor
entryRuleSensor
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorAccess().getGroup()); }
		(rule__Sensor__Group__0)
		{ after(grammarAccess.getSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilter
entryRuleFilter
:
{ before(grammarAccess.getFilterRule()); }
	 ruleFilter
{ after(grammarAccess.getFilterRule()); } 
	 EOF 
;

// Rule Filter
ruleFilter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterAccess().getGroup()); }
		(rule__Filter__Group__0)
		{ after(grammarAccess.getFilterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getNode_ImplParserRuleCall_0()); }
		ruleNode_Impl
		{ after(grammarAccess.getNodeAccess().getNode_ImplParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getSensorParserRuleCall_1()); }
		ruleSensor
		{ after(grammarAccess.getNodeAccess().getSensorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getFilterParserRuleCall_2()); }
		ruleFilter
		{ after(grammarAccess.getNodeAccess().getFilterParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__0__Impl
	rule__System__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getSystemAction_0()); }
	()
	{ after(grammarAccess.getSystemAccess().getSystemAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__1__Impl
	rule__System__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getSystemKeyword_1()); }
	'System'
	{ after(grammarAccess.getSystemAccess().getSystemKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__2__Impl
	rule__System__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__3__Impl
	rule__System__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getGroup_3()); }
	(rule__System__Group_3__0)?
	{ after(grammarAccess.getSystemAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group_3__0__Impl
	rule__System__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getNodesKeyword_3_0()); }
	'nodes'
	{ after(grammarAccess.getSystemAccess().getNodesKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group_3__1__Impl
	rule__System__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_3_1()); }
	'{'
	{ after(grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group_3__2__Impl
	rule__System__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getNodesAssignment_3_2()); }
	(rule__System__NodesAssignment_3_2)
	{ after(grammarAccess.getSystemAccess().getNodesAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group_3__3__Impl
	rule__System__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getGroup_3_3()); }
	(rule__System__Group_3_3__0)*
	{ after(grammarAccess.getSystemAccess().getGroup_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_3_4()); }
	'}'
	{ after(grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_3_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group_3_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group_3_3__0__Impl
	rule__System__Group_3_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getCommaKeyword_3_3_0()); }
	','
	{ after(grammarAccess.getSystemAccess().getCommaKeyword_3_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group_3_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_3_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getNodesAssignment_3_3_1()); }
	(rule__System__NodesAssignment_3_3_1)
	{ after(grammarAccess.getSystemAccess().getNodesAssignment_3_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Node_Impl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node_Impl__Group__0__Impl
	rule__Node_Impl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node_Impl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNode_ImplAccess().getNodeAction_0()); }
	()
	{ after(grammarAccess.getNode_ImplAccess().getNodeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node_Impl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node_Impl__Group__1__Impl
	rule__Node_Impl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Node_Impl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNode_ImplAccess().getNodeKeyword_1()); }
	'Node'
	{ after(grammarAccess.getNode_ImplAccess().getNodeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node_Impl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node_Impl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node_Impl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNode_ImplAccess().getNameAssignment_2()); }
	(rule__Node_Impl__NameAssignment_2)
	{ after(grammarAccess.getNode_ImplAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__0__Impl
	rule__Sensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorAction_0()); }
	()
	{ after(grammarAccess.getSensorAccess().getSensorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__1__Impl
	rule__Sensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorKeyword_1()); }
	'Sensor'
	{ after(grammarAccess.getSensorAccess().getSensorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNameAssignment_2()); }
	(rule__Sensor__NameAssignment_2)
	{ after(grammarAccess.getSensorAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Filter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__0__Impl
	rule__Filter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getFilterAction_0()); }
	()
	{ after(grammarAccess.getFilterAccess().getFilterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__1__Impl
	rule__Filter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getFilterKeyword_1()); }
	'Filter'
	{ after(grammarAccess.getFilterAccess().getFilterKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__2__Impl
	rule__Filter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getNameAssignment_2()); }
	(rule__Filter__NameAssignment_2)
	{ after(grammarAccess.getFilterAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__3__Impl
	rule__Filter__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getFilterAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__4__Impl
	rule__Filter__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getGroup_4()); }
	(rule__Filter__Group_4__0)?
	{ after(grammarAccess.getFilterAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getFilterAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Filter__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group_4__0__Impl
	rule__Filter__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getPreviousNodeKeyword_4_0()); }
	'previousNode'
	{ after(grammarAccess.getFilterAccess().getPreviousNodeKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getPreviousNodeAssignment_4_1()); }
	(rule__Filter__PreviousNodeAssignment_4_1)
	{ after(grammarAccess.getFilterAccess().getPreviousNodeAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__System__NodesAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemAccess().getNodesNodeParserRuleCall_3_2_0()); }
		ruleNode
		{ after(grammarAccess.getSystemAccess().getNodesNodeParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__NodesAssignment_3_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemAccess().getNodesNodeParserRuleCall_3_3_1_0()); }
		ruleNode
		{ after(grammarAccess.getSystemAccess().getNodesNodeParserRuleCall_3_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node_Impl__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNode_ImplAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getNode_ImplAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getSensorAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getFilterAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__PreviousNodeAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterAccess().getPreviousNodeNodeCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getFilterAccess().getPreviousNodeNodeEStringParserRuleCall_4_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getFilterAccess().getPreviousNodeNodeEStringParserRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getFilterAccess().getPreviousNodeNodeCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
