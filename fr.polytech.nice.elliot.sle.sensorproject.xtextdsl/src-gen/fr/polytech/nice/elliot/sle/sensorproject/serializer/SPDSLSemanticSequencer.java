/*
 * generated by Xtext 2.14.0
 */
package fr.polytech.nice.elliot.sle.sensorproject.serializer;

import com.google.inject.Inject;
import fr.polytech.nice.elliot.sle.sensorproject.services.SPDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import sensorproject.Filter;
import sensorproject.Node;
import sensorproject.Sensor;
import sensorproject.SensorprojectPackage;

@SuppressWarnings("all")
public class SPDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SPDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SensorprojectPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SensorprojectPackage.FILTER:
				sequence_Filter(context, (Filter) semanticObject); 
				return; 
			case SensorprojectPackage.NODE:
				sequence_Node_Impl(context, (Node) semanticObject); 
				return; 
			case SensorprojectPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case SensorprojectPackage.SYSTEM:
				sequence_System(context, (sensorproject.System) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Node returns Filter
	 *     Filter returns Filter
	 *
	 * Constraint:
	 *     (name=EString previousNode=[Node|EString]?)
	 */
	protected void sequence_Filter(ISerializationContext context, Filter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns Node
	 *     Node_Impl returns Node
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Node_Impl(ISerializationContext context, Node semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensorprojectPackage.Literals.NODE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensorprojectPackage.Literals.NODE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNode_ImplAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns Sensor
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensorprojectPackage.Literals.NODE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensorprojectPackage.Literals.NODE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensorAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     System returns System
	 *
	 * Constraint:
	 *     (nodes+=Node nodes+=Node*)?
	 */
	protected void sequence_System(ISerializationContext context, sensorproject.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
