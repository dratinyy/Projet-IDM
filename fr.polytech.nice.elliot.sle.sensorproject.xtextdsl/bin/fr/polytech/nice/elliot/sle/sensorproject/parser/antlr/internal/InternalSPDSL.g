/*
 * generated by Xtext 2.14.0
 */
grammar InternalSPDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.polytech.nice.elliot.sle.sensorproject.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.polytech.nice.elliot.sle.sensorproject.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.polytech.nice.elliot.sle.sensorproject.services.SPDSLGrammarAccess;

}

@parser::members {

 	private SPDSLGrammarAccess grammarAccess;

    public InternalSPDSLParser(TokenStream input, SPDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "System";
   	}

   	@Override
   	protected SPDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	iv_ruleSystem=ruleSystem
	{ $current=$iv_ruleSystem.current; }
	EOF;

// Rule System
ruleSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSystemAccess().getSystemAction_0(),
					$current);
			}
		)
		otherlv_1='System'
		{
			newLeafNode(otherlv_1, grammarAccess.getSystemAccess().getSystemKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='nodes'
			{
				newLeafNode(otherlv_3, grammarAccess.getSystemAccess().getNodesKeyword_3_0());
			}
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSystemAccess().getNodesNodeParserRuleCall_3_2_0());
					}
					lv_nodes_5_0=ruleNode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSystemRule());
						}
						add(
							$current,
							"nodes",
							lv_nodes_5_0,
							"fr.polytech.nice.elliot.sle.sensorproject.SPDSL.Node");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getSystemAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSystemAccess().getNodesNodeParserRuleCall_3_3_1_0());
						}
						lv_nodes_7_0=ruleNode
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSystemRule());
							}
							add(
								$current,
								"nodes",
								lv_nodes_7_0,
								"fr.polytech.nice.elliot.sle.sensorproject.SPDSL.Node");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_3_4());
			}
		)?
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNodeAccess().getNode_ImplParserRuleCall_0());
		}
		this_Node_Impl_0=ruleNode_Impl
		{
			$current = $this_Node_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeAccess().getSensorParserRuleCall_1());
		}
		this_Sensor_1=ruleSensor
		{
			$current = $this_Sensor_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeAccess().getFilterParserRuleCall_2());
		}
		this_Filter_2=ruleFilter
		{
			$current = $this_Filter_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNode_Impl
entryRuleNode_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNode_ImplRule()); }
	iv_ruleNode_Impl=ruleNode_Impl
	{ $current=$iv_ruleNode_Impl.current; }
	EOF;

// Rule Node_Impl
ruleNode_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNode_ImplAccess().getNodeAction_0(),
					$current);
			}
		)
		otherlv_1='Node'
		{
			newLeafNode(otherlv_1, grammarAccess.getNode_ImplAccess().getNodeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNode_ImplAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNode_ImplRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.polytech.nice.elliot.sle.sensorproject.SPDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	iv_ruleSensor=ruleSensor
	{ $current=$iv_ruleSensor.current; }
	EOF;

// Rule Sensor
ruleSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSensorAccess().getSensorAction_0(),
					$current);
			}
		)
		otherlv_1='Sensor'
		{
			newLeafNode(otherlv_1, grammarAccess.getSensorAccess().getSensorKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.polytech.nice.elliot.sle.sensorproject.SPDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterRule()); }
	iv_ruleFilter=ruleFilter
	{ $current=$iv_ruleFilter.current; }
	EOF;

// Rule Filter
ruleFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFilterAccess().getFilterAction_0(),
					$current);
			}
		)
		otherlv_1='Filter'
		{
			newLeafNode(otherlv_1, grammarAccess.getFilterAccess().getFilterKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.polytech.nice.elliot.sle.sensorproject.SPDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getFilterAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='previousNode'
			{
				newLeafNode(otherlv_4, grammarAccess.getFilterAccess().getPreviousNodeKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFilterRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getFilterAccess().getPreviousNodeNodeCrossReference_4_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getFilterAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
